package main

import "core:fmt"
import l "lexer"
import u "core:unicode"

LAYOUT := `
h(75
    v(75 Source Console)
    v(50
        t(Watch Breakpoints Commands Struct Exe)
        t(Stack Files Registers Data Thread)
    )
)
`

NodeType :: enum { H, V, T }
NodeOptions :: struct {
    split: f32, // h: L->R | v: U->D | t:0
}
Node :: struct {
    type: NodeType,
    options: NodeOptions,
    children: []Node, // h,v: 2 | t: 1+
}

tokenize_layout :: proc(layout: string) -> (tokens: [dynamic]l.Token) {
    t : l.Tokenizer
    l.tokenizer_init(&t, layout)
    l.tokenize(&t, &tokens)
    return
}

parse_layout :: proc(tokens: []l.Token) -> (root: Node) {
    for token in tokens {
        fmt.printf("%v ", token.data)
    }
    // tabs := 0
    // for token in tokens {
    //     if token.data == ")" {
    //         fmt.println()
    //         tabs -= 1
    //         for _ in 0..<tabs { fmt.printf("\t") }
    //     }
    //     fmt.printf("%v ", token.data)
    //     if token.data == "(" {
    //         fmt.println()
    //         tabs += 1
    //         for _ in 0..<tabs { fmt.printf("\t") }
    //     }
    // }
    fmt.println()
    return {}
}
